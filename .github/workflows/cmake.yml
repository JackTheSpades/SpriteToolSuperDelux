name: CMake

on: [push]

env:
  BUILD_TYPE: Release

jobs:
  build:

    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
    
    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      if: matrix.os == 'ubuntu-latest'
    
    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      if: matrix.os == 'windows-latest'

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE
    
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: pixi
        path: ${{github.workspace}}/build/Release/pixi.exe
      if: matrix.os == 'windows-latest'
    
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: pixi
        path: ${{github.workspace}}/build/pixi
      if: matrix.os == 'ubuntu-latest'
    
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
      if: matrix.os == 'ubuntu-latest'
    
    - name: Install python packages
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install beautifulsoup4 requests
      if: matrix.os == 'ubuntu-latest'

    - name: Test
      working-directory: ${{github.workspace}}/test
      shell: bash
      run: bash pixi_test.sh
      if: matrix.os == 'ubuntu-latest'
    
    - name: Upload test results
      uses: actions/upload-artifact@v2
      with:
        name: test-result
        path: ${{github.workspace}}/test/results.zip
      if: matrix.os == 'ubuntu-latest'