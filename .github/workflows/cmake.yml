name: CMake

on: [push]

env:
  BUILD_TYPE: Release

jobs:
  build:

    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
    
    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      if: matrix.os == 'ubuntu-latest'
    
    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      if: matrix.os == 'windows-latest'

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE
    
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: pixi
        path: ${{github.workspace}}/build/Release/pixi.exe
      if: matrix.os == 'windows-latest'
    
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: pixi
        path: ${{github.workspace}}/build/pixi
      if: matrix.os == 'ubuntu-latest'
    
    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
      if: matrix.os == 'ubuntu-latest'
    
    - name: Install python packages
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install beautifulsoup4 requests
      if: matrix.os == 'ubuntu-latest'

    - name: Test
      working-directory: ${{github.workspace}}/test
      shell: bash
      run: bash pixi_test.sh
      if: "matrix.os == 'ubuntu-latest' && !startsWith(github.event.head_commit.message, '[NoTest]')"
    
    - name: Upload test results
      uses: actions/upload-artifact@v2
      with:
        name: test-result
        path: ${{github.workspace}}/test/results.zip
      if: "matrix.os == 'ubuntu-latest' && !startsWith(github.event.head_commit.message, '[NoTest]')"
    
    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v1
      if: matrix.os == 'windows-latest'
    
    - name: Setup nuget
      uses: actions/setup-dotnet@v1
      if: matrix.os == 'windows-latest'
    
    - name: Build CFG Editor
      shell: powershell
      run: |
        cd "${{github.workspace}}/src/CFG Editor"
        nuget restore "CFG Editor.sln"
        msbuild.exe "CFG Editor.sln" -p:Configuration=Release
        Compress-Archive "${{github.workspace}}/src/CFG Editor/CFG Editor/bin/Release/CFG Editor.exe","${{github.workspace}}/src/CFG Editor/CFG Editor/bin/Release/Newtonsoft.Json.dll" ${{github.workspace}}/cfgeditor.zip
      if: matrix.os == 'windows-latest'
    
    - name: Upload CFG Editor executable
      uses: actions/upload-artifact@v2
      with:
        name: "CFG Editor"
        path: ${{github.workspace}}/cfgeditor.zip
      if: matrix.os == 'windows-latest'

